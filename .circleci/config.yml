# https://circleci.com/docs/2.0/configuration-reference/

version: 2

jobs:
  lint:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Images
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run lint

  test13:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      # CircleCI provides a mechanism for caching build artefacts which
      # can be used to cache docker image layers, but it turns out that
      # saving and loading the cache is actually slower than just pulling
      # our base image from docker hub every time.
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test13
  test12:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test12
  test11:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test11
  test10:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test10
  test9_6:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test9_6
  test9_5:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run test9_5

  # check the minimum supported go version
  msgv:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/test_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker build -t pggen_source_msgv -f Dockerfile.msgv .
      - run:
          name: Run Tests
          command: |
            docker-compose --file .circleci/docker-compose.yml run msgv

workflows:
  version: 2
  pr:
    jobs:
      - "lint"
      - "test13"
      - "test12"
      - "test11"
      - "test10"
      - "test9_6"
      - "test9_5"
      - "msgv"
